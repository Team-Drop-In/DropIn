# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main", "develop" ]
#  pull_request:
#    branches: [ "main", "develop" ]

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: dropin-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: dropin-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: dropin-codedeploy-deployment-group
  RESOURCE_PATH: ./server/src/main/resources/application-prod.yml

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{secrets.SPRING_DATASOURCE_URL}}
          spring.datasource.username: ${{secrets.SPRING_DATASOURCE_USERNAME}}
          spring.datasource.password: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
          spring.security.oauth2.client.registration.google.clientId: ${{secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENTID}}
          spring.security.oauth2.client.registration.google.clientSecret: ${{secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENTSECRET}}
          spring.jwt.key: ${{secrets.JWT_KEY}}
          spring.jwt.access-token-expiration-minutes: ${{secrets.JWT_ACCESS_TOKEN_EXPIRATION}}
          spring.jwt.refresh-token-expiration-minutes: ${{secrets.JWT_REFRESH_TOKEN_EXPIRATION}}
          spring.mail.username: ${{secrets.SPRING_MAIL_USERNAME}}
          spring.mail.password: ${{secrets.SPRING_MAIL_PASSWORD}}
          spring.redis.host: ${{secrets.SPRING_REDIS_HOST}}
          spring.redis.port: ${{secrets.SPRING_REDIS_PORT}}
          cloud.aws.imageS3.bucket: ${{secrets.CLOUD_AWS_IMAGES3_BUCKET}}
          cloud.aws.imageS3.bucketUrl: ${{secrets.CLOUD_AWS_IMAGES3_BUCKETURL}}
          cloud.aws.imageS3.credentials.accessKey: ${{secrets.CLOUD_AWS_IMAGES3_CREDENTIALS_ACCESSKEY}}
          cloud.aws.imageS3.credentials.secretKey: ${{secrets.CLOUD_AWS_IMAGES3_CREDENTIALS_SECRETKEY}}
          cloud.aws.imageS3.region.static: ${{ secrets.CLOUD_AWS_IMAGES3_REGION_STATIC }}



      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          gradle-version: 8.1.1
          arguments: build
          build-root-directory: ./server


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{secrets.SPRING_DATASOURCE_URL}}
          spring.datasource.username: ${{secrets.SPRING_DATASOURCE_USERNAME}}
          spring.datasource.password: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
          spring.security.oauth2.client.registration.google.clientId: ${{secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENTID}}
          spring.security.oauth2.client.registration.google.clientSecret: ${{secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENTSECRET}}
          spring.jwt.key: ${{secrets.JWT_KEY}}
          spring.jwt.access-token-expiration-minutes: ${{secrets.JWT_ACCESS_TOKEN_EXPIRATION}}
          spring.jwt.refresh-token-expiration-minutes: ${{secrets.JWT_REFRESH_TOKEN_EXPIRATION}}
          spring.mail.username: ${{secrets.SPRING_MAIL_USERNAME}}
          spring.mail.password: ${{secrets.SPRING_MAIL_PASSWORD}}
          spring.redis.host: ${{secrets.SPRING_REDIS_HOST}}
          spring.redis.port: ${{secrets.SPRING_REDIS_PORT}}
          cloud.aws.imageS3.bucket: ${{secrets.CLOUD_AWS_IMAGES3_BUCKET}}
          cloud.aws.imageS3.bucketUrl: ${{secrets.CLOUD_AWS_IMAGES3_BUCKETURL}}
          cloud.aws.imageS3.credentials.accessKey: ${{secrets.CLOUD_AWS_IMAGES3_CREDENTIALS_ACCESSKEY}}
          cloud.aws.imageS3.credentials.secretKey: ${{secrets.CLOUD_AWS_IMAGES3_CREDENTIALS_SECRETKEY}}
          cloud.aws.imageS3.region.static: ${{ env.AWS_REGION }}

      # (3) Gradle build (Test 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          gradle-version: 8.1.1
          arguments: build
          build-root-directory: ./server

      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .
      # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip